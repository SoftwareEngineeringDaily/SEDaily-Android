apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.oss.licenses.plugin'

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion
    defaultConfig {
        applicationId "com.koalatea.thehollidayinn.softwareengineeringdaily"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 4
        versionName "1.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            applicationIdSuffix ".debug"
        }

        dev {
            minifyEnabled false
            applicationIdSuffix ".dev"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/rxjava.properties'
        exclude 'LICENSE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

def build_param = "${build}"
if (build_param != "dev") {
    //exclude dev build
    android.variantFilter { variant ->
        if (variant.buildType.name.equals('dev')) {
            variant.setIgnore(true)
        }
    }
} else {
    //exclude all except dev build
    android.variantFilter { variant ->
        if (!variant.buildType.name.equals('dev')) {
            variant.setIgnore(true)
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // Android
    implementation "com.android.support:design:$rootProject.supportLibraryVersion"
    implementation "com.android.support:design:$rootProject.supportLibraryVersion"
    implementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support.constraint:constraint-layout:$rootProject.constraintlayoutVersion"
    implementation "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"
    implementation "android.arch.lifecycle:extensions:$rootProject.architectureComponents"
    annotationProcessor "android.arch.lifecycle:compiler:$rootProject.architectureComponents"
    //Rx Java
    implementation "io.reactivex:rxandroid:1.2.1"
    implementation "io.reactivex:rxjava:1.1.6"
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.rxjava2Version"
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.rxAndroid2Version"
    //Network
    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofit2Version"
    implementation "com.squareup.retrofit2:adapter-rxjava:$rootProject.retrofit2Version"
    implementation "com.squareup.okhttp3:okhttp:$rootProject.okhttp3Version"
    implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.okhttp3Version"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.retrofit2Version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$rootProject.retrofit2Version"
    //Presentation
    implementation "com.squareup.picasso:picasso:$rootProject.picassoVersion"
    implementation "com.google.android.gms:play-services-oss-licenses:$rootProject.playVersion"
    //UI
    implementation "com.github.pchmn:MaterialChipsInput:$rootProject.materialChipsVersion"
    implementation "com.jakewharton:butterknife:$rootProject.butterknifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.butterknifeVersion"
    implementation "blue.aodev:material-values:$rootProject.materialValuesVersion"
    //Firebase
    implementation "com.google.firebase:firebase-core:$rootProject.firebaseServicesVersion"
    implementation "com.google.firebase:firebase-crash:$rootProject.firebaseServicesVersion"
    //Architecture
    implementation "com.google.dagger:dagger:$rootProject.daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"
    testAnnotationProcessor "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"
    //Logging
    implementation "com.jakewharton.timber:timber:$rootProject.timberVersion"
    implementation "com.akaita.java:rxjava2-debug:$rootProject.rxjava2Debug"
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$rootProject.leakCanaryVersion"
    devImplementation "com.squareup.leakcanary:leakcanary-android:$rootProject.leakCanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.leakCanaryVersion"
    //Data
    implementation "com.google.code.gson:gson:$rootProject.gsonVersion"
    compileOnly "com.google.auto.value:auto-value:$rootProject.autoValueVersion"
    annotationProcessor "com.google.auto.value:auto-value:$rootProject.autoValueVersion"
    compileOnly "com.ryanharter.auto.value:auto-value-gson:$rootProject.autoValueGsonVersion"
    annotationProcessor "com.ryanharter.auto.value:auto-value-gson:$rootProject.autoValueGsonVersion"
    //Testing
    testImplementation "junit:junit:$rootProject.junitVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    testCompile "android.arch.core:core-testing:$rootProject.architectureComponents"
    androidTestCompile("com.android.support.test.espresso:espresso-core:$rootProject.espressoVersion", {
    exclude group: 'com.android.support', module: 'support-annotations'
  })
}
apply plugin: 'com.google.gms.google-services'